# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13nIAq7MiORvgPHsRE48bwBGqXsij31ZZ

# Proyek Analisis Data: Nama dataset
- Nama: Dicky Maulana Rozi
- Email: dickymaulanarozi@gmail.com
- Id Dicoding: dickymrz

## Menentukan Pertanyaan Bisnis

- **Kota** apa saja yang paling sering melakukan **pemesanan** produk?

- Berapa presentase **produk** yang menerima **ulasan positif**?

- **Produk** apa saja yang memiliki jumlah penjualan **tertinggi** dan **terendah**?

- Berapa **total pendapatan penjualan** perusahaan?

- Berapa **harga produk** tertinggi dan terendah?

## Menyaipkan semua library yang dibuthkan
"""

import pandas as pd
import numpy as np

import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

import warnings
warnings.filterwarnings('ignore')

"""## Data Wrangling

### Gathering Data
"""

from google.colab import drive
drive.mount('/content/drive')

df_customer = pd.read_csv("drive/My Drive/Colab Notebooks/IDCamp 2023/Belajar Analisis Data dengan Python/dataset/E-Commerce Public Dataset/customers_dataset.csv")
df_customer.head()

df_geolocation = pd.read_csv("drive/My Drive/Colab Notebooks/IDCamp 2023/Belajar Analisis Data dengan Python/dataset/E-Commerce Public Dataset/geolocation_dataset.csv")
df_geolocation.head()

df_order_items = pd.read_csv("drive/My Drive/Colab Notebooks/IDCamp 2023/Belajar Analisis Data dengan Python/dataset/E-Commerce Public Dataset/order_items_dataset.csv")
df_order_items.head()

df_order_payment = pd.read_csv("drive/My Drive/Colab Notebooks/IDCamp 2023/Belajar Analisis Data dengan Python/dataset/E-Commerce Public Dataset/order_payments_dataset.csv")
df_order_payment.head()

df_order_reviews = pd.read_csv("drive/My Drive/Colab Notebooks/IDCamp 2023/Belajar Analisis Data dengan Python/dataset/E-Commerce Public Dataset/order_reviews_dataset.csv")
df_order_reviews.head()

df_orders = pd.read_csv("drive/My Drive/Colab Notebooks/IDCamp 2023/Belajar Analisis Data dengan Python/dataset/E-Commerce Public Dataset/orders_dataset.csv")
df_orders.head()

df_product = pd.read_csv("drive/My Drive/Colab Notebooks/IDCamp 2023/Belajar Analisis Data dengan Python/dataset/E-Commerce Public Dataset/products_dataset.csv")
df_product.head()

"""### Assessing Data

Menilai tabel `df_customer`
"""

df_customer.info()

df_customer.isna().sum()

print("Jumlah duplikasi: ", df_customer.duplicated().sum())

df_customer.describe()

"""Menilai tabel `df_geolocation`"""

df_geolocation.info()

df_geolocation.isna().sum()

print("Jumlah duplikasi: ", df_geolocation.duplicated().sum())

df_geolocation.describe()

"""Menilai tabel `df_order_items`"""

df_order_items.info()

df_order_items.isna().sum()

print("Jumlah duplikasi: ", df_order_items.duplicated().sum())

df_order_items.describe()

"""Menilai tabel `df_order_payment`"""

df_order_payment.info()

df_order_payment.isna().sum()

print("Jumlah duplikasi: ", df_order_payment.duplicated().sum())

df_order_payment.describe()

"""Menilai tabel `df_order_reviews`"""

df_order_reviews.info()

df_order_reviews.isna().sum()

print("Jumlah duplikasi: ", df_order_reviews.duplicated().sum())

df_order_reviews.describe()

"""Menilai tabel `df_orders`"""

df_orders.info()

df_orders.isna().sum()

print("Jumlah duplikasi: ", df_orders.duplicated().sum())

df_orders.describe()

"""Menilai tabel `df_product`"""

df_product.info()

df_product.isna().sum()

print("Jumlah duplikasi: ", df_product.duplicated().sum())

df_product.describe()

"""### Cleaning Data

Membersihkan tabel `df_geolocation`

Duplicate data
"""

print("Jumlah duplikasi: ", df_geolocation.duplicated().sum())

df_geolocation.drop_duplicates(inplace=True)
print("Jumlah duplikasi setelah melakukan drop: ", df_geolocation.duplicated().sum())

"""Membersihkan tabel `df_order_reviews`

Missing Values
"""

df_order_reviews.isna().sum()

df_order_reviews[df_order_reviews.review_comment_message.isna()]

df_order_reviews['review_comment_title'].fillna('', inplace=True)
df_order_reviews['review_comment_message'].fillna('', inplace=True)

df_order_reviews.isna().sum()

df_order_reviews.head()

"""Membersihkan tabel `df_orders`

Missing Values
"""

df_orders.isna().sum()

np.unique(df_orders.order_status)

df_orders[df_orders.order_status == 'delivered'].isnull().sum()

"""Setelah saya baca kembali tabel `df_orders` berikut adalah kesimpulan yang saya dapat dari kolom yang mempunyai missing value
*   `order_approved_at`: Menampilkan waktu persetujuan pembayaran.
*   `order_delivered_carrier_date`: Menampilkan waktu pesanan yang diterima oleh mitra logistik.
*   `order_delivered_customer_date`: Menampilkan tanggal pengiriman pesanan ke pelanggan.

Karena pesanan dengan `order_status` `delivered`seharusnya tidak memiliki data yang kosong maka saya akan menghapus baris yang kosong.



"""

# Menghapus baris dengan 'order_status' == 'delivered' dan nilai NaN di kolom 'order_approved_at'
df_orders = df_orders[~((df_orders['order_status'] == 'delivered') & (df_orders['order_approved_at'].isna()))]

# Menghapus baris dengan 'order_status' == 'delivered' dan nilai NaN di kolom 'order_delivered_carrier_date'
df_orders = df_orders[~((df_orders['order_status'] == 'delivered') & (df_orders['order_delivered_carrier_date'].isna()))]

# Menghapus baris dengan 'order_status' == 'delivered' dan nilai NaN di kolom 'order_delivered_customer_date'
df_orders = df_orders[~((df_orders['order_status'] == 'delivered') & (df_orders['order_delivered_customer_date'].isna()))]

df_orders[df_orders.order_status == 'delivered'].isnull().sum()

"""Change Data Type"""

df_orders_date = ['order_purchase_timestamp', 'order_approved_at', 'order_delivered_carrier_date', 'order_delivered_customer_date', 'order_estimated_delivery_date']

# Mengubah kolom-kolom menjadi tipe data datetime
df_orders[df_orders_date] = df_orders[df_orders_date].apply(pd.to_datetime)

print(df_orders.dtypes)

"""Membersihkan tabel `df_product`

Missing Values
"""

df_product.isna().sum()

df_product = df_product.dropna()

df_product.isna().sum()

"""## Exploratory Data Analysis (EDA)

### Explore 1:

`df_orders`,`df_order_payment` , `df_customer`, and `df_geolocation`
"""

df_orders.sample(5)

df_customer.sample(5)

df_geolocation.sample(5)

"""Menggabungkan tabel `df_orders`, `df_customer` dan `df_geolocation`"""

# Menggabungkan df_orders dengan df_customer berdasarkan customer_id
merged_orders_customer = pd.merge(df_orders, df_customer, on='customer_id')

# Menggabungkan hasil gabungan dengan df_geolocation berdasarkan customer_zip_code_prefix
merged_orders_cust_geoloc = pd.merge(merged_orders_customer, df_geolocation, left_on='customer_zip_code_prefix', right_on='geolocation_zip_code_prefix')

merged_orders_cust_geoloc.head()

"""Menghitung frekuensi pemesanan setiap kota"""

city_order_counts = merged_orders_cust_geoloc['geolocation_city'].value_counts()
city_order_counts.head(10)

"""Kota dengan frekuensi pemesanan tertinggi"""

most_ordered_city = city_order_counts.idxmax()

print("Kota dengan frekuensi pemesanan tertinggi adalah:", most_ordered_city)

"""Total pendapatan penjualan perusahaan"""

print(f'Pembelian pertama: {df_orders["order_purchase_timestamp"].min()}')
print(f'Pembelian terakhir: {df_orders["order_purchase_timestamp"].max()}')

# Filter pesanan untuk tahun 2016
orders_2016 = merged_orders_cust_geoloc_payment[
    (merged_orders_cust_geoloc_payment['order_purchase_timestamp'] >= '2016-01-01') &
    (merged_orders_cust_geoloc_payment['order_purchase_timestamp'] <= '2016-12-31')
]

# Filter pesanan untuk tahun 2017
orders_2017 = merged_orders_cust_geoloc_payment[
    (merged_orders_cust_geoloc_payment['order_purchase_timestamp'] >= '2017-01-01') &
    (merged_orders_cust_geoloc_payment['order_purchase_timestamp'] <= '2017-12-31')
]

# Filter pesanan untuk tahun 2018
orders_2018 = merged_orders_cust_geoloc_payment[
    (merged_orders_cust_geoloc_payment['order_purchase_timestamp'] >= '2018-01-01') &
    (merged_orders_cust_geoloc_payment['order_purchase_timestamp'] <= '2018-12-31')
]

# Hitung total pendapatan perusahaan untuk tahun 2016
total_pendapatan_2016 = orders_2016['payment_value'].sum()

# Hitung total pendapatan perusahaan untuk tahun 2017
total_pendapatan_2017 = orders_2017['payment_value'].sum()

# Hitung total pendapatan perusahaan untuk tahun 2018
total_pendapatan_2018 = orders_2018['payment_value'].sum()

# Tampilkan hasilnya
print("Total Pendapatan Tahun 2016:", round(total_pendapatan_2016))
print("Total Pendapatan Tahun 2017:", round(total_pendapatan_2017))
print("Total Pendapatan Tahun 2018:", round(total_pendapatan_2018))

# Menggabungkan hasil gabungan dengan df_order_payment berdasarkan order_id
merged_orders_cust_geoloc_payment = pd.merge(merged_orders_cust_geoloc, df_order_payment, on='order_id')

# Menghitung total pendapatan penjualan
total_revenue = merged_orders_cust_geoloc_payment['payment_value'].sum()

print("Total pendapatan penjualan perusahaan adalah:", round(total_revenue))

"""Menghitung rata-rata frekuensi pembelian pelanggan"""

# Menghitung rata-rata frekuensi pembelian pelanggan untuk tahun 2016
customer_order_counts_2016 = orders_2016.groupby('customer_id')['order_id'].nunique()
average_purchase_frequency_2016 = customer_order_counts_2016.mean()

# Menghitung rata-rata frekuensi pembelian pelanggan untuk tahun 2017
customer_order_counts_2017 = orders_2017.groupby('customer_id')['order_id'].nunique()
average_purchase_frequency_2017 = customer_order_counts_2017.mean()

# Menghitung rata-rata frekuensi pembelian pelanggan untuk tahun 2018
customer_order_counts_2018 = orders_2018.groupby('customer_id')['order_id'].nunique()
average_purchase_frequency_2018 = customer_order_counts_2018.mean()

print("Rata-rata frekuensi pembelian pelanggan untuk tahun 2016 adalah:", round(average_purchase_frequency_2016))
print("Rata-rata frekuensi pembelian pelanggan untuk tahun 2017 adalah:", round(average_purchase_frequency_2017))
print("Rata-rata frekuensi pembelian pelanggan untuk tahun 2018 adalah:", round(average_purchase_frequency_2018))

# Kelompokkan data berdasarkan 'customer_id' dan hitung jumlah pesanan untuk setiap pelanggan
customer_order_counts = merged_orders_cust_geoloc_payment.groupby('customer_id')['order_id'].nunique()

# Hitung rata-rata frekuensi pembelian pelanggan
average_purchase_frequency = customer_order_counts.mean()

print("Rata-rata frekuensi pembelian pelanggan adalah:", round(average_purchase_frequency))

"""### Explore 2:
`df_product`, `df_order_items`, and `df_order_reviews`

"""

df_product.sample(5)

df_order_items.sample(5)

df_order_reviews.sample(5)

"""Menggabungkan tabel `df_product`, `df_order_items`, dan `df_order_reviews`"""

# Menggabungkan df_product dengan df_order_items berdasarkan product_id
merged_product_order_items = pd.merge(df_product, df_order_items, on='product_id')

# Menggabungkan hasil gabungan dengan df_order_reviews berdasarkan order_id
merged_product_order_items_reviews = pd.merge(merged_product_order_items, df_order_reviews, on='order_id')

merged_product_order_items_reviews.head()

"""Filter ulasan positif dengan skor 4 atau lebih"""

positive_reviews = merged_product_order_items_reviews[merged_product_order_items_reviews['review_score'] >= 4]

positive_reviews.head()

"""Menghitung jumlah ulasan positif dan total ulasan untuk setiap produk"""

positive_reviews_count = positive_reviews.groupby('product_id')['review_id'].count()

product_reviews_count = pd.merge(positive_reviews_count, df_product, on='product_id')

sorted_product_reviews_count = product_reviews_count.sort_values(by='review_id', ascending=False)
top_products_by_reviews = sorted_product_reviews_count[['product_category_name', 'review_id']]
top_products_by_reviews.head(10)

"""Menghitung persentase produk yang menerima ulasan positif

"""

total_reviews_count = positive_reviews.groupby('product_id')['review_id'].count().reset_index()
total_reviews_count.columns = ['product_id', 'total_reviews']

merged_product_reviews = pd.merge(total_reviews_count, df_product[['product_id', 'product_category_name']], on='product_id')

merged_product_reviews['percentage_positive'] = (merged_product_reviews['total_reviews'] / merged_product_reviews['total_reviews'].sum())

top_products_with_percentage = merged_product_reviews[['product_category_name', 'percentage_positive']]
top_products_with_percentage['percentage_positive'] = top_products_with_percentage['percentage_positive'].apply(lambda x: f'{x:.2%}')
top_products_with_percentage = top_products_with_percentage.sort_values(by='percentage_positive', ascending=False)
top_products_with_percentage.head(10)

# Hitung jumlah produk yang menerima ulasan positif (skor > 3) dan negatif (skor <= 3)
positive_reviews = merged_product_order_items_reviews[merged_product_order_items_reviews['review_score'] >= 4]['product_category_name'].count()
negative_reviews = merged_product_order_items_reviews[merged_product_order_items_reviews['review_score'] <= 3.9]['product_category_name'].count()

# Hitung persentase produk yang menerima ulasan positif dan negatif
total_products = merged_product_order_items_reviews['product_category_name'].count()
percentage_positive = (positive_reviews / total_products) * 100
percentage_negative = (negative_reviews / total_products) * 100

print(f'Persentase produk yang menerima ulasan positif: {percentage_positive:.2f}%')
print(f'Persentase produk yang menerima ulasan negatif: {percentage_negative:.2f}%')

"""Produk dengan jumlah penjualan tertinggi"""

# Menghitung total penjualan untuk setiap produk
product_sales_counts = merged_product_order_items_reviews.groupby(['product_id', 'product_category_name'])['order_item_id'].sum().reset_index()

# Produk dengan penjualan tertinggi
top_selling_product = product_sales_counts.sort_values(by='order_item_id', ascending=False).head(1)

top_selling_product

"""Produk dengan jumlah penjualan terendah"""

# Produk dengan penjualan terendah
bottom_selling_product = product_sales_counts.sort_values(by='order_item_id', ascending=True).head(1)

bottom_selling_product

"""Harga produk tertinggi"""

max_prices = merged_product_order_items_reviews.agg(['max']).reset_index()
show_max_prices = max_prices[['product_category_name', 'price']]
show_max_prices

"""Harga produk terendah"""

min_prices = merged_product_order_items_reviews.agg(['min']).reset_index()
show_min_prices = min_prices[['product_category_name', 'price']]
show_min_prices

"""## Visualization & Explanatory Analysis

### Pertanyaan 1:
**Kota** apa saja yang paling sering melakukan **pemesanan** produk?
"""

# Hitung frekuensi pemesanan setiap kota
city_order_counts = merged_orders_cust_geoloc['geolocation_city'].value_counts()

# Membuat palet warna dengan variasi hue dari 'royalblue'
colors = sns.color_palette("Blues_d", len(city_order_counts.head(10)))

# Visualisasi data
plt.figure(figsize=(18, 6))
bars = plt.bar(city_order_counts.head(10).index, city_order_counts.head(10), color=colors)
plt.title('Top 10 Kota dengan Jumlah Pemesanan Tertinggi')
plt.xlabel('Kota')
plt.ylabel('Jumlah Pemesanan')

# Menambahkan label angka di atas bar
for bar in bars:
    height = bar.get_height()
    plt.annotate(f'{int(height)}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3),
                 textcoords="offset points", ha='center', va='bottom', fontsize=8, color='black', weight='bold')

# Menampilkan plot
plt.tight_layout()
plt.show()

most_ordered_city = city_order_counts.idxmax()
print("Kota yang paling sering melakukan pemesanan produk adalah:", most_ordered_city)

"""### Pertanyaan 2:
Berapa presentase **produk** yang menerima **ulasan positif**?

"""

# Ambil 10 produk dengan jumlah ulasan positif tertinggi
top_10_products = top_products_by_reviews.head(10)

# Membuat palet warna dengan variasi hue dari 'Blues_d'
n_colors = len(top_10_products)
colors = sns.color_palette("Blues_d", n_colors)

# Visualisasi data
plt.figure(figsize=(18, 6))

# Membuat penampung untuk nama yang sudah digunakan
used_names = set()

for index, row in top_10_products.iterrows():
    product_name = row['product_category_name']

    # Jika nama produk sudah digunakan, tambahkan perbedaan vertikal
    i = 1
    while product_name in used_names:
        product_name = f"{row['product_category_name']} ({i})"
        i += 1

    # Tambahkan nama produk ke set nama yang sudah digunakan
    used_names.add(product_name)

    # Buat bar dengan nama produk yang sudah disesuaikan
    plt.bar(product_name, row['review_id'], color=colors[index % n_colors])

# Menambahkan label angka di atas bar
for container in plt.gca().containers:
    plt.gca().bar_label(container, fmt='%d', label_type='edge', fontsize=8, color='black', weight='bold')

plt.xlabel('Kategori Produk')
plt.ylabel('Jumlah Ulasan Positif')
plt.title('Top 10 Kategori Produk dengan Jumlah Ulasan Positif Tertinggi')

# Tampilkan plot
plt.tight_layout()
plt.xticks(rotation=15)
plt.show()

top_products_with_percentage.head(10)

"""### Pertanyaan 3:
**Produk** apa saja yang memiliki jumlah penjualan **tertinggi** dan **terendah**?
"""

# Mengambil data 3 produk dengan jumlah penjualan tertinggi
top_selling_products = product_sales_counts.sort_values(by='order_item_id', ascending=False).head(3)

# Mengambil data 3 produk dengan jumlah penjualan terendah
bottom_selling_product = product_sales_counts.sort_values(by='order_item_id', ascending=True).head(3)

# Membuat daftar produk dan total penjualannya untuk 3 tertinggi
top_products = list(top_selling_products['product_category_name'])
top_sales = list(top_selling_products['order_item_id'])

# Membuat daftar produk dan total penjualannya untuk 3 terendah
bottom_product = list(bottom_selling_product['product_category_name'])
bottom_sale = list(bottom_selling_product['order_item_id'])

# Membuat layout subplot
fig, ax = plt.subplots(figsize=(12, 6))

# Membuat palet warna dengan variasi hue dari 'Blues'
n_colors = len(top_products) + len(bottom_product)
colors = sns.color_palette("Blues", n_colors)

# Membuat penampung untuk nama yang sudah digunakan
used_names = set()

# Diagram batang untuk 3 produk dengan penjualan tertinggi
for index, (product_name, sales) in enumerate(zip(top_products, top_sales)):
    # Jika nama produk sudah digunakan, tambahkan perbedaan vertikal
    i = 1
    while product_name in used_names:
        product_name = f"{top_products[index]} ({i})"
        i += 1

    # Tambahkan nama produk ke set nama yang sudah digunakan
    used_names.add(product_name)

    # Buat bar dengan nama produk yang sudah disesuaikan
    plt.bar(product_name, sales, color=colors[index])

# Diagram batang untuk 3 produk dengan penjualan terendah
for index, (product_name, sales) in enumerate(zip(bottom_product, bottom_sale)):
    # Jika nama produk sudah digunakan, tambahkan perbedaan vertikal
    i = 0
    while product_name in used_names:
        product_name = f"{bottom_product[index]} ({i})"
        i += 1

    # Tambahkan nama produk ke set nama yang sudah digunakan
    used_names.add(product_name)

    # Buat bar dengan nama produk yang sudah disesuaikan
    plt.bar(product_name, sales, color=colors[len(top_products) + index])

# Menambahkan label dan judul
ax.set_xlabel('Produk')
ax.set_ylabel('Total Penjualan')
ax.set_title('Produk dengan Jumlah Penjualan Tertinggi dan Terendah')

# Menambahkan angka di atas bar
for bar in ax.containers:
    height = bar[0].get_height()
    ax.annotate(f'{height:.2f}',
                xy=(bar[0].get_x() + bar[0].get_width() / 2, height),
                xytext=(0, 3),  # 3 points vertical offset
                textcoords="offset points",
                ha='center', va='bottom')

# Menampilkan visualisasi
plt.tight_layout()
plt.xticks(rotation=15)
plt.show()

top_selling_product

bottom_selling_product

"""### Pertanyaan 4:
Berapa **total pendapatan penjualan** perusahaan?
"""

# Mengelompokkan data ke dalam bulan
monthly_revenue = merged_orders_cust_geoloc_payment.groupby(merged_orders_cust_geoloc_payment['order_purchase_timestamp'].dt.to_period("M"))['payment_value'].sum()

# Membuat time series plot dengan interval bulanan
plt.figure(figsize=(18, 6))
plt.plot(monthly_revenue.index.start_time, monthly_revenue.values, marker='o', color='royalblue')
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%B %Y'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=1))
plt.gcf().autofmt_xdate()
plt.xlabel('Bulan dan Tahun')
plt.ylabel('Total Pendapatan (dalam jutaan)')
plt.title('Total Pendapatan Penjualan Perusahaan')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

print("Total pendapatan penjualan perusahaan adalah:", round(total_revenue))

"""### Pertanyaan 5:
Berapa **harga produk** tertinggi dan terendah?
"""

# Mengambil data 3 produk dengan harga tertinggi
top_priced_products = merged_product_order_items_reviews.sort_values(by='price', ascending=False).head(3)

# Mengambil data 3 produk dengan harga terendah
bottom_priced_products = merged_product_order_items_reviews.sort_values(by='price', ascending=True).head(3)

# Membuat daftar produk dan harganya untuk 3 tertinggi
top_products = list(top_priced_products['product_category_name'])
top_prices = list(top_priced_products['price'])

# Membuat daftar produk dan harganya untuk 3 terendah
bottom_products = list(bottom_priced_products['product_category_name'])
bottom_prices = list(bottom_priced_products['price'])

# Membuat layout subplot
fig, ax = plt.subplots(figsize=(12, 6))

# Membuat palet warna dengan variasi hue dari 'Blues'
n_colors = len(top_products) + len(bottom_products)
colors = sns.color_palette("Blues", n_colors)

# Membuat penampung untuk nama yang sudah digunakan
used_names = set()

# Diagram batang untuk 3 produk dengan harga tertinggi
for index, (product_name, price) in enumerate(zip(top_products, top_prices)):
    # Jika nama produk sudah digunakan, tambahkan perbedaan vertikal
    i = 1
    while product_name in used_names:
        product_name = f"{top_products[index]} ({i})"
        i += 1

    # Tambahkan nama produk ke set nama yang sudah digunakan
    used_names.add(product_name)

    # Buat bar dengan nama produk yang sudah disesuaikan
    plt.bar(product_name, price, color=colors[index])

# Diagram batang untuk 3 produk dengan harga terendah
for index, (product_name, price) in enumerate(zip(bottom_products, bottom_prices)):
    # Jika nama produk sudah digunakan, tambahkan perbedaan vertikal
    i = 0
    while product_name in used_names:
        product_name = f"{bottom_products[index]} ({i})"
        i += 1

    # Tambahkan nama produk ke set nama yang sudah digunakan
    used_names.add(product_name)

    # Buat bar dengan nama produk yang sudah disesuaikan
    plt.bar(product_name, price, color=colors[len(top_products) + index])

# Menambahkan label dan judul
ax.set_xlabel('Produk')
ax.set_ylabel('Harga')
ax.set_title('Produk dengan Harga Tertinggi dan Terendah')

# Menambahkan angka di atas bar
for bar in ax.containers:
    height = bar[0].get_height()
    ax.annotate(f'{height:.2f}',
                xy=(bar[0].get_x() + bar[0].get_width() / 2, height),
                xytext=(0, 3),  # 3 points vertical offset
                textcoords="offset points",
                ha='center', va='bottom')

# Menampilkan visualisasi
plt.tight_layout()
plt.xticks(rotation=15)
plt.show()

print("Harga tertinggi")
show_max_prices

print("Harga terendah")
show_min_prices

"""## Conclusion

- **Conclution pertanyaan 1**

  Kota yang paling sering melakukan pemesanan produk adalah Rio de Janeiro. Hal ini didasarkan pada analisis data frekuensi pemesanan produk yang mengungkapkan bahwa Rio de Janeiro memiliki jumlah pemesanan produk tertinggi dibandingkan dengan kota-kota lainnya dalam dataset yang tersedia.

- **Conclution pertanyaan 2**

  Berdasarkan data yang disediakan, beberapa kategori produk yang memiliki presentase positif yang tinggi adalah:

  1. Kategori "moveis_decoracao" dengan presentase positif sebesar 0.46%.

  2. Kategori "ferramentas_jardim" dengan presentase positif sebesar 0.43%.

  3. Kategori "cama_mesa_banho" dengan presentase positif sebesar 0.40%.

  Kategori-kategori ini memiliki presentase produk yang menerima ulasan positif di atas rata-rata, sehingga dapat dianggap sebagai produk-produk yang mendapat respon positif dari pelanggan. Ini bisa menjadi informasi berharga bagi penjual atau produsen untuk lebih fokus pada produk-produk dalam kategori ini atau mengambil tindakan untuk meningkatkan ulasan positif pada kategori lainnya.

- **Conclution pertanyaan 3**

  1. Produk dengan jumlah penjualan tertinggi:

    Kategori produk "ferramentas_jardim" adalah yang memiliki jumlah penjualan tertinggi dengan total penjualan sebanyak 798 item. Kategori ini sangat diminati oleh pelanggan, dan penjual mungkin ingin mempertimbangkan untuk meningkatkan stok atau promosi produk ini.
  
  2. Produk dengan jumlah penjualan terendah:

    Kategori produk "perfumaria" adalah yang memiliki jumlah penjualan terendah dengan hanya 1 item terjual. Kategori ini memiliki tingkat permintaan yang lebih rendah dibandingkan dengan kategori lainnya. Penjual mungkin perlu melakukan strategi promosi atau peningkatan lainnya untuk meningkatkan penjualan produk ini.

- **Conclution pertanyaan 4**

  Total pendapatan penjualan perusahaan adalah sebesar 1.669.800.762. Ini merupakan jumlah pendapatan yang dihasilkan dari penjualan berbagai produk selama periode waktu yang diamati. Total pendapatan ini merupakan gambaran dari kinerja penjualan perusahaan dalam periode tersebut.


- **Conclution pertanyaan 5**

  1. Harga produk tertinggi dalam dataset ini adalah 6.735,00 unit mata uang (tidak ada satuan yang spesifik dalam data yang diberikan) dan produk ini termasuk dalam kategori "utilidades_domesticas."

  2. Harga produk terendah dalam dataset ini adalah 0,85 unit mata uang dan produk ini termasuk dalam kategori "agro_industria_e_comercio."
"""